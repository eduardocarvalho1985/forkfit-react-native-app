apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

react {
    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"].execute(null, rootDir).text.trim())
    reactNativeDir = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    hermesCommand = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"
    codegenDir = new File(["node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    enableBundleCompression = (findProperty('android.enableBundleCompression') ?: false).toBoolean()
    cliFile = new File(["node", "--print", "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"].execute(null, rootDir).text.trim())
    bundleCommand = "export:embed"
    autolinkLibrariesWithApp()
}

def enableProguardInReleaseBuilds = (findProperty('android.enableProguardInReleaseBuilds') ?: false).toBoolean()
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'
apply from: new File(["node", "--print", "require.resolve('@sentry/react-native/package.json')"].execute().text.trim(), "../sentry.gradle")

// =================================================================================
// START OF ANDROID CONFIGURATION
// ===============================================================================

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    // A static namespace is required for modern Gradle.
    namespace "forkfit.app.forkfitprod"

    // A clean default config. The real ID comes from flavors.
    defaultConfig {
        minSdkVersion = 23
        targetSdkVersion = 34
        versionCode = 1
        versionName = "1.0.0"
    }

    // The standard definition for your app's three identities.
    flavorDimensions "environment"
    productFlavors {
        development {
            dimension "environment"
            applicationId "forkfit.app.forkfitdev"
        }
        preview {
            dimension "environment"
            applicationId "forkfit.app.forkfitpreview"
        }
        production {
            dimension "environment"
            applicationId "forkfit.app.forkfitprod"
        }
    }
    
    // signingConfigs MUST be inside the android block
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            if (System.getenv("UPLOAD_STORE_FILE")) {
                storeFile file(System.getenv("UPLOAD_STORE_FILE"))
                storePassword System.getenv("UPLOAD_STORE_PASSWORD")
                keyAlias System.getenv("UPLOAD_KEY_ALIAS")
                keyPassword System.getenv("UPLOAD_KEY_PASSWORD")
            }
        }
    }

    // buildTypes MUST be inside the android block
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }
} // <-- THE ANDROID BLOCK CORRECTLY ENDS HERE

// =================================================================================
// END OF ANDROID CONFIGURATION
// =================================================================================

dependencies {
    implementation("com.facebook.react:react-android")
    def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true";
    def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true";
    def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true";
    if (isGifEnabled) { implementation("com.facebook.fresco:animated-gif:${expoLibs.versions.fresco.get()}") }
    if (isWebpEnabled) {
        implementation("com.facebook.fresco:webpsupport:${expoLibs.versions.fresco.get()}")
        if (isWebpAnimatedEnabled) { implementation("com.facebook.fresco:animated-webp:${expoLibs.versions.fresco.get()}") }
    }
    if (hermesEnabled.toBoolean()) { implementation("com.facebook.react:hermes-android") } else { implementation jscFlavor }
}

apply plugin: 'com.google.gms.google-services'